install.packages("e1071")
library(e1071)
data(iris)

m <- naiveBayes(Species ~ ., data = iris) # mean(iris$Sepal.Length[iris$Species=="setosa"])
m

table(predict(m, iris), iris[,5])

###########################################################################
install.packages(c("ElemStatLearn", "klaR"))
data(spam, package="ElemStatLearn")
library(klaR)

train.ind <- sample(1:nrow(spam), ceiling(nrow(spam)*2/3), replace=FALSE)
nb.res <- NaiveBayes(spam ~ ., data=spam[train.ind,])

plot(nb.res)

nb.pred <- predict(nb.res, spam[-train.ind,])
confusion.mat <- table(nb.pred$class, spam[-train.ind,"spam"])
confusion.mat
sum(diag(confusion.mat))/sum(confusion.mat)

###########################################################################
library (e1071)
install.packages("mlbench")
data (HouseVotes84, package="mlbench")
head(HouseVotes84)
summary(HouseVotes84)

model <- naiveBayes(Class ~ ., data = HouseVotes84)
pred <- predict(model, HouseVotes84[,-1])
tab <- table(pred, HouseVotes84$Class)
tab

table(HouseVotes84$Class)
sum(tab[row(tab)==col(tab)])/sum(tab)